{"ast":null,"code":"var _jsxFileName = \"/home/jacob/github_files/node_stuff/react_land/joke_gen/src/JokeList.js\";\n// import React, { useState, useEffect } from \"react\";\nimport React from 'react';\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\"; // function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n//   /* get jokes if there are no jokes */\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n//   /* empty joke list and then call getJokes */\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n//   /* change vote for this id by delta (+1 or -1) */\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n//   /* render: either loading spinner or list of sorted jokes. */\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n//   return null;\n// }\n// export default JokeList;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass JokeList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: []\n    };\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.geetJokes();\n  }\n\n  componentDidUpdate() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n  }\n\n  async getJokes() {\n    try {\n      let jokes = this.state.jokes;\n      let seenJokes = new Set(jokes.map(j => j.id));\n\n      while (jokes.length < this.props.numJokesToGet) {\n        let res = await axios.get('https://icanhazdadjoke.com', {\n          headers: {\n            Accept: 'application/json'\n          }\n        });\n        let {\n          status,\n          ...joke\n        } = res.data;\n\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id); // jokeVotes[joke.id] = jokeVotes[joke.id] || 0;\n\n          jokes.push({ ...joke\n          });\n        } else {\n          console.log('duplicate found!');\n        }\n      }\n\n      this.setState({\n        jokes\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  generateNewJokes() {\n    this.setState(st => ({\n      jokes: st.jokes.filter(j => j.locked)\n    }));\n  }\n\n  vote(id, delta) {\n    this.setState(st => ({\n      jokes: st.jokes.map(j => j.id === id ? { ...j,\n        votes: j.votes + delta\n      } : j)\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"JokeList\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: this.generateNewJokes,\n        children: \"Get New Jokes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), this.state.jokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n        text: j.joke,\n        id: j.id,\n        votes: j.votes,\n        vote: this.vote\n      }, j.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nJokeList.defaultProps = {\n  numJokesToGet: 10\n};\nexport default JokeList;","map":{"version":3,"sources":["/home/jacob/github_files/node_stuff/react_land/joke_gen/src/JokeList.js"],"names":["React","axios","Joke","JokeList","Component","constructor","props","state","jokes","generateNewJokes","bind","vote","componentDidMount","length","numJokesToGet","geetJokes","componentDidUpdate","getJokes","seenJokes","Set","map","j","id","res","get","headers","Accept","status","joke","data","has","add","push","console","log","setState","e","st","filter","locked","delta","votes","render","defaultProps"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\nimport React from 'react';\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n\n//   /* get jokes if there are no jokes */\n\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n  \n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n//   /* empty joke list and then call getJokes */\n\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  \n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n  \n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n\n//   return null;\n\n// }\n\n// export default JokeList;\n\n\nclass JokeList extends React.Component {\n  static defaultProps = {\n    numJokesToGet: 10\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes : []\n    };\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote=this.vote.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.geetJokes()\n  }\n\n  componentDidUpdate() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n  }\n\n\n  async getJokes() {\n    try {\n      let jokes = this.state.jokes;\n      let seenJokes = new Set(jokes.map(j => j.id));\n\n      while (jokes.length < this.props.numJokesToGet)  {\n        let res = await axios.get('https://icanhazdadjoke.com' , {\n          headers : { Accept : 'application/json'}\n        });\n        let {status , ...joke} = res.data;\n\n        if(!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          // jokeVotes[joke.id] = jokeVotes[joke.id] || 0;\n          jokes.push({...joke })\n        }else {\n          console.log('duplicate found!')\n        }\n      }\n      this.setState( { jokes });\n\n    }catch (e) {\n      console.log(e);\n    }\n  }\n\n  generateNewJokes() {\n    this.setState(st => ({jokes : st.jokes.filter(j => j.locked)}));\n  }\n\n\n  vote(id , delta) {\n    this.setState(st => ({\n      jokes: st.jokes.map(j => j.id === id? {...j, votes: j.votes + delta} : j)\n    }))\n  }\n\n\n  render () {\n    return (\n      <div className = 'JokeList'>\n        <button className='JokeList-getmore' onClick={this.generateNewJokes}>\n          Get New Jokes\n        </button>\n        {this.state.jokes.map(j => (\n          <Joke\n          text={j.joke}\n          key={j.id}\n          id={j.id}\n          votes={j.votes}\n          vote={this.vote}\n          />\n        ))}\n      </div>\n    )\n  }\n\n}\n\nexport default JokeList;"]},"metadata":{},"sourceType":"module"}